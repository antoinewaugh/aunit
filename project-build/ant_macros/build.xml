<project name="aunit-build" default="all" >

	<property environment="env"/>

	<fail unless="env.AUNIT_HOME" message="Environment Variable AUNIT_HOME not set."/>
	<fail unless="env.APAMA_HOME" message="Environment Variable APAMA_HOME not set."/>

	<!-- 
		Imports
	-->
	<import file="${env.APAMA_HOME}/etc/apama-macros.xml" />

	<!-- 
		Set Environment Variables if they dont already exist. 
		 Ant property vars are immutable so override will not occur 
	-->

	<property name="env.AUNIT_PROJECT_HOME" value="${env.AUNIT_HOME}/workspace" />
	<property name="env.AUNIT_TEST_HOME" value="${env.AUNIT_HOME}/.__test" />
	<property name="env.AUNIT_BUNDLE_HOME" value="${env.AUNIT_HOME}/.__repository" />

	<!-- 
		Reference Variables
	-->

	<property name="aunit.build.dir" value="${env.AUNIT_HOME}/project-build" />
	<property name="aunit.workspace.dir" value="${env.AUNIT_PROJECT_HOME}" />
	<property name="aunit.repository.dir" value="${env.AUNIT_BUNDLE_HOME}" />
	<property name="aunit.test.dir" value="${env.AUNIT_TEST_HOME}" />
	<property name="aunit.epl.dir" value="${aunit.build.dir}/epl" />

	<target name="all" depends="prepare_repository">
		<build_repository />
	</target>

	<tstamp>
		<format property="BUNDLE_TODAY" pattern="yyyy-MM-dd" locale="en,UK"/>
		<format property="BUNDLE_YEAR" pattern="yyyy" locale="en,UK"/>
	</tstamp>

	<!-- 
		Hash Creation - used by generated build_scripts/cdp_build_script.xml
	-->
	<macrodef name="create-hash">
		<attribute name="file" default="" />
		<sequential>
			
			<!-- Only create the hash file if not quick/dev build -->
			<if>
				<equals arg1="${env.quickBuild}" arg2="false"/>
				<then>
					<echo> Creating Hash for @{file} </echo>
					<var name="eiArgs" />
					<append-arg-if-true var="eiArgs" optionName="--hashes" arg="true" />

					<exec executable="${apama.bin}/engine_inject${bin.ext}">
						<arg line="${eiArgs}" />
						<arg file="@{file}" />
						<redirector append="true">
							<outputfilterchain>
								<replacestring from="${hashes-matchstring}${file.separator}"/>
								<!-- Convert all file separators to forward slashes -->
								<replacestring from="\" to="/"/>
							</outputfilterchain>
						</redirector>
					</exec>
				</then>
			</if>
		</sequential>
	</macrodef>


	<!-- 
		Set AUNIT repository build type if not specified, 
		default to source to support core/community editions 
	-->
    <target name="check-build-type" unless="${env.AUNIT_CDP_BUILD}">
        <property name="env.AUNIT_CDP_BUILD" value="false"/>
    </target>

	<!-- 
		Prepare repository folder for build
	-->
	<target name="prepare_repository" depends="check-build-type">
			<sequential>
			<!-- delete previous repository -->
			<delete dir="${aunit.repository.dir}/projects" failonerror="false" />
			<delete dir="${aunit.repository.dir}/cdp"  failonerror="false" />
			<delete dir="${aunit.repository.dir}/ant_macros"  failonerror="false" />
			<delete dir="${aunit.repository.dir}/bundles"  failonerror="false" />
		
			<!-- copy source projects to /repository/projects directory -->
			<copy todir="${aunit.repository.dir}/projects">

				<!-- workspace -->
				<fileset dir="${aunit.workspace.dir}">			
				<include name="**/*.mon"/>	
					<include name="**/*.evt"/>
				</fileset>

				<!-- aunit UnitTest project -->
				<fileset dir="${aunit.epl.dir}">			
				<include name="**/*.mon"/>	
					<include name="**/*.evt"/>
				</fileset>

			</copy>

			<!-- copy bundle definitions to /repository/bundle_definitions directory -->
			<copy todir="${aunit.repository.dir}/bundle_definitions" flatten="true">
				<!-- workspace -->
				<fileset dir="${aunit.workspace.dir}">
					<include name="**/*.aunit"/>
				</fileset>
				<!-- aunit UnitTest project -->
				<fileset dir="${aunit.epl.dir}">
					<include name="**/*.aunit"/>
				</fileset>
				
			</copy>

			<!-- convert *.aunit file to *.xml -->
			<move todir="${aunit.repository.dir}/bundle_definitions" includeemptydirs="false">
				<fileset dir="${aunit.repository.dir}/bundle_definitions"/>
				<mapper type="glob" from="*.aunit" to="*.xml"/>
			</move>	
		
			<!-- copy required ant source files to /repository/ant_macros, /repository/common -->
			<copy todir="${aunit.repository.dir}">
				<fileset dir="${aunit.build.dir}">
					<include name="common/**"/>
					<include name="ant_macros/**"/>
				</fileset>
			</copy>
		</sequential>
	</target>

	<!-- 
		CDP repository build
	-->

	<macrodef name="build_cdp_repository">
		<sequential>
			
			<!-- Loop through all '*.xml' files and create cdp *.bnd file -->
			<xslt basedir="${aunit.repository.dir}/bundle_definitions" includes="*.xml" extension=".bnd" destdir="${aunit.repository.dir}/bundles" style="${common.xslt.dir}/cdp_bundle.xslt">
				<param name="cdp_dir" expression="${AUNIT_HOME}/.__repository/cdp" />
				<param name="date" expression="${BUNDLE_TODAY}"/>
				<param name="year" expression="${BUNDLE_YEAR}"/>
				<param name="version" expression="1.0"/>
			</xslt>

			<!-- create cdp manifest file -->
			<echo>Creating Project manifest file</echo>

			<xslt basedir="${aunit.repository.dir}/bundle_definitions" includes="*.xml" extension="_manifest.txt" destdir="${aunit.repository.dir}/manifest" style="${common.xslt.dir}/cdp_manifest.xslt">
			</xslt>
		
			<!-- create build script file for cdp -->
			<xslt basedir="${aunit.repository.dir}/bundle_definitions" includes="*.xml" extension="_manifest.txt" destdir="${aunit.repository.dir}/build_scripts" style="${common.xslt.dir}/cdp_build_scripts.xslt">
				<param name="manifest_extension" expression="_manifest.txt"/>
				<param name="manifest_dir" expression="${aunit.repository.dir}/manifest"/>
				<param name="source_dir" expression="${aunit.repository.dir}"/> 							
				<param name="macro_dir" expression="${env.AUNIT_HOME}/.__repository/cdp" />
			</xslt>
			
			<echo>Creating CDP build script </echo>

			<!-- Create cdp build script -->
			<concat destfile="${aunit.repository.dir}/build_scripts/cdp_build_script.xml">
				<header filtering="no"><![CDATA[<project name="CDP_build_script">]]>&#010;&#010;<![CDATA[<target name="build_cdps">]]>&#010;</header>
				<fileset dir="${aunit.repository.dir}/build_scripts" includes="*.txt"/>
				<!-- Add a tab to all line read in -->
				<filterchain>
					<prefixlines prefix="&#009;"/>
				</filterchain>
				<footer filtering="no"><![CDATA[</target></project>]]></footer>
			</concat>

			<echo>Creating Project CDP file</echo>

			<!-- create *.cdp file -->
			<ant antfile="${aunit.repository.dir}/build_scripts/cdp_build_script.xml" target="build_cdps"/>		

			<!-- Loop through all '*.xml' files for the cdp macros -->
			<xslt basedir="${aunit.repository.dir}/bundle_definitions" includes="*.xml" extension=".macro" destdir="${aunit.repository.dir}/macros" style="${common.xslt.dir}/cdp_macro.xslt">
				<param name="macro_dir" expression="${env.AUNIT_HOME}/.__repository/cdp" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- 
		Source repository build
	-->

	<macrodef name="build_source_repository">
		<sequential>

			<!-- Loop through all '*.xml' files and create source *.bnd file -->
			<xslt basedir="${aunit.repository.dir}/bundle_definitions" includes="*.xml" extension=".bnd" destdir="${aunit.repository.dir}/bundles" style="${common.xslt.dir}/source_bundle.xslt">
					<param name="date" expression="${BUNDLE_TODAY}"/>
					<param name="year" expression="${BUNDLE_YEAR}"/>
					<param name="version" expression="1.0"/>
			</xslt>
			
			<!-- Loop through all '*.xml' files for the source macros -->
			<xslt basedir="${aunit.repository.dir}/bundle_definitions" includes="*.xml" extension=".macro" destdir="${aunit.repository.dir}/macros" style="${common.xslt.dir}/source_macro.xslt">
					<param name="project_dir" expression="${env.AUNIT_HOME}/.__repository/projects" />
			</xslt>	

		</sequential>
	</macrodef>

	<!-- 
		Build AUNIT repository
	-->

	<macrodef name="build_repository">
		<sequential>
				
			<property name="common.xslt.dir" value="${aunit.repository.dir}/common/xslt" />
				
			<if> 

				<!-- Perform CDP Build -->

				<equals arg1="${env.AUNIT_CDP_BUILD}" arg2="true" />
				<then>

					<echo> **** Creating CDP Build **** </echo>

					<build_cdp_repository />					

				</then>

				<!-- Perform Source Build -->

    			<else>

					<echo> **** Creating SOURCE Build **** </echo>

					<build_source_repository />
				
    			</else>
			</if>	    			

			<echo>Copying the default aunit-imports.xml macro file</echo>

			<copy todir="${aunit.repository.dir}/ant_macros">
				<fileset dir="${aunit.repository.dir}/ant_macros">
					<include name="aunit-imports.xml"/>
				</fileset>				
			</copy>

			<echo>Create aunit.xml macro file</echo>

			<concat-asb-macros source="${aunit.repository.dir}/macros" target="${aunit.repository.dir}" />

			<!-- Delete TEMP/WORKING folders & contents -->
			<delete dir="${aunit.repository.dir}/build_scripts"  failonerror="false"  />
			<delete dir="${aunit.repository.dir}/macros"  failonerror="false" />
			<delete dir="${aunit.repository.dir}/manifest"  failonerror="false" />
			<delete dir="${aunit.repository.dir}/bundle_definitions"  failonerror="false" />
			<delete dir="${aunit.repository.dir}/common"  failonerror="false" />
			<delete file="${aunit.repository.dir}/ant_macros/build.xml" failonerror="false"  />
			<delete file="${aunit.repository.dir}/ant_macros/prepare_build.xml"  failonerror="false" />
			
			<!-- Directory deletion subject to build type flag CDP/SOURCE -->

			<if> 
				<equals arg1="${env.AUNIT_CDP_BUILD}" arg2="true" />
				<then>
					<delete dir="${aunit.repository.dir}/projects" />
				</then>
    			<else>
					<delete dir="${aunit.repository.dir}/cdp" />
    			</else>
			</if>	    			

			</sequential>
					
		</macrodef>
		
		<!-- MACRO CREATION -->
		<macrodef name="concat-asb-macros">
			<attribute name="source"/>
			<attribute name="target"/>
			<sequential>
				<!-- Merge all resulting macros files into one -->
				<concat destfile="@{target}/ant_macros/aunit.xml">
					<header filtering="no"><![CDATA[<project name="AUNITBundles" basedir="." >]]>&#010;&#010;</header>
					<fileset dir="@{source}" includes="*.macro"/>
					<!-- Add a tab to all line read in -->
					<filterchain>
						<prefixlines prefix="&#009;"/>
					</filterchain>
					<footer filtering="no"><![CDATA[</project>]]></footer>
				</concat>
			</sequential>
		</macrodef>

</project>